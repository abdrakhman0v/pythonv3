import telebot
from telebot import types
from datetime import datetime


bot = telebot.TeleBot('7297092697:AAGXVOVy1j3bv9_tgtMkkoaax3RcZFRHMxU')

@bot.message_handler(commands=['start'])
def start_command(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º', callback_data='schedule'))
    markup.add(types.InlineKeyboardButton('üíÉ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏ —Å—Ç–∏–ª—é)', callback_data='directions_styles'))
    markup.add(types.InlineKeyboardButton('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫', callback_data='trial-lesson'))
    markup.add(types.InlineKeyboardButton('üìç –ê–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='adress_contacts'))
    markup.add(types.InlineKeyboardButton('‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data='questions'))
    bot.send_message(message.chat.id,
        'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å—Ç—É–¥–∏—é —Ç–∞–Ω—Ü–∞ –∏ —Ñ–∏—Ç–Ω–µ—Å–∞ <b>KGDance</b>!\n\n'
        '–ú—ã —Ä–∞–¥—ã, —á—Ç–æ –≤—ã —Å –Ω–∞–º–∏ üíÉ\n\n'
        '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
        parse_mode='HTML',
        reply_markup=markup)

# HELP COMMAND
bot.message_handler(commands=['help'])
def help_command(message):
    ...


# -----------–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é---------------
@bot.callback_query_handler(func=lambda call:call.data == 'menu')
def menu(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–æ –¥–Ω—è–º', callback_data='schedule'))
    markup.add(types.InlineKeyboardButton('üíÉ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É –∏ —Å—Ç–∏–ª—é)', callback_data='directions_styles'))
    markup.add(types.InlineKeyboardButton('üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫', callback_data='trial-lesson'))
    markup.add(types.InlineKeyboardButton('üìç –ê–¥—Ä–µ—Å –∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã', callback_data='adress_contacts'))
    markup.add(types.InlineKeyboardButton('‚ùì –ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã', callback_data='questions'))
    
    bot.edit_message_text(
        text = '–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
        chat_id = call.message.chat.id,
        message_id = call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup)
   
#-----------------–†–ê–°–ü–ò–°–ê–ù–ò–ï-------------------
@bot.callback_query_handler(func=lambda call:call.data == 'schedule')
def handle_days(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü–Ω / –°—Ä / –ü—Ç',callback_data='mon_wed_fri'))
    markup.add(types.InlineKeyboardButton('–í—Ç / –ß—Ç / –°–±',callback_data='tue_thu_sat'))
    markup.add(types.InlineKeyboardButton('–°–± / –í—Å',callback_data='sat_sun'))
    markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))

    bot.edit_message_text(
        text = '–í—ã–±–µ—Ä–∏ –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ',
        chat_id = call.message.chat.id,
        message_id = call.message.message_id,
        reply_markup=markup)
    

@bot.callback_query_handler(func=lambda call:call.data in ['mon_wed_fri','tue_thu_sat','sat_sun'])
def view_schedule(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è',callback_data='trial-lesson'))
    markup.row(
        types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='schedule'),
        types.InlineKeyboardButton('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'),
        )
    if call.data == 'mon_wed_fri':
        text = (
            "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ü–Ω / –°—Ä / –ü—Ç:\n\n"
            "üïó 08:00 ‚Äî –¢–∞–Ω–µ—Ü –∂–∏–≤–æ—Ç–∞ (14‚Äì70+ –ª–µ—Ç)\n"
            "üïò 09:00 ‚Äî –ù–∞—Ä–æ–¥–Ω—ã–µ —Ç–∞–Ω—Ü—ã (7‚Äì10 –ª–µ—Ç)\n"
            "üïô 10:00 ‚Äî –õ–§–ö (–ª–µ—á–µ–±–Ω–∞—è —Ñ–∏–∑-—Ä–∞) (7-18 –ª–µ—Ç)\n"
            "üïö 11:00 ‚Äî –ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞ (7‚Äì10 –ª–µ—Ç)\n"
            "üïõ 12:00 ‚Äî –î–µ—Ç—Å–∫–∞—è —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è (4‚Äì6 –ª–µ—Ç)\n"
            "üïî 17:00 ‚Äî –î–µ—Ç—Å–∫–∞—è —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è (4‚Äì6 –ª–µ—Ç)\n"
            "üïï 18:10 ‚Äî –ó—É–º–±–∞ + –§–∏—Ç–Ω–µ—Å (14‚Äì70+ –ª–µ—Ç)"
        )
        bot.edit_message_text(chat_id = call.message.chat.id,
                              message_id = call.message.message_id,
                              text = text,
                              reply_markup=markup)
    elif call.data == 'tue_thu_sat':
        text = (
        "üìÖ –í—Ç / –ß—Ç / –°–±\n\n"
        "üïó 08:00 ‚Äî –ô–æ–≥–∞ + –§–∏—Ç–Ω–µ—Å (14‚Äì70+ –ª–µ—Ç)\n"
        "üïò 09:00 ‚Äî –ù–∞—Ä–æ–¥–Ω—ã–µ —Ç–∞–Ω—Ü—ã (12‚Äì18 –ª–µ—Ç)\n"
        "üïô 10:00 ‚Äî –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–Ω—Ü—ã (7‚Äì18 –ª–µ—Ç)\n"
        "üïö 11:00 ‚Äî –õ–§–ö (4‚Äì6 –ª–µ—Ç)\n"
        "üïõ 12:00 ‚Äî –ë—ç–±–∏ (2‚Äì4 –≥–æ–¥–∞)\n"
        "üïú 13:30 ‚Äî –§—É–Ω–∫—Ü. —Ç—Ä–µ–Ω. + –ò–Ω—Ç–∏–º–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞ (14‚Äì70+ –ª–µ—Ç)\n"
        "üïî 17:00 ‚Äî –ù–∞—Ä–æ–¥–Ω—ã–µ —Ç–∞–Ω—Ü—ã (7‚Äì11 –ª–µ—Ç)\n"
        "üïï 18:00 ‚Äî High Heels (14‚Äì50 –ª–µ—Ç)\n"
        "üïñ 19:00 ‚Äî –¢–∞–Ω–µ—Ü –∂–∏–≤–æ—Ç–∞ (14‚Äì70 –ª–µ—Ç)\n"
        "üïó 20:00 ‚Äî –≠—Ä–æ—Ñ–∏—Ç (18‚Äì70 –ª–µ—Ç)"
    )
        bot.edit_message_text(chat_id = call.message.chat.id,
                              message_id = call.message.message_id,
                              text = text,
                              reply_markup=markup)
    elif call.data == 'sat_sun':    
        text = (
        "üìÖ –°—É–±–±–æ—Ç–∞ / –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ\n\n"
        "üïß 12:30 ‚Äî –î–µ—Ç—Å–∫–∞—è —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è"
    )
        bot.edit_message_text(chat_id = call.message.chat.id,
                              message_id = call.message.message_id,
                              text = text,
                              reply_markup=markup)
    
    
#------------------–ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø---------------------
@bot.callback_query_handler(func=lambda call: call.data == 'directions_styles')
def handle_directions(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('üë∂ –î–µ—Ç–∏ (2‚Äì6 –ª–µ—Ç)', callback_data = 'baby'))
    markup.add(types.InlineKeyboardButton('üßí –î–µ—Ç–∏ (7‚Äì12 –ª–µ—Ç)', callback_data = 'childs'))
    markup.add(types.InlineKeyboardButton('üßë‚Äçüéì –ü–æ–¥—Ä–æ—Å—Ç–∫–∏ (12‚Äì18)', callback_data = 'teens'))
    markup.add(types.InlineKeyboardButton('üë© –í–∑—Ä–æ—Å–ª—ã–µ (18+)', callback_data = 'adults'))
    markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
    
    bot.edit_message_text(
        text = '–í—ã–±–∏—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–∑—Ä–∞—Å—Ç–∞:',
        chat_id = call.message.chat.id,
        message_id = call.message.message_id,
        reply_markup = markup)
    
@bot.callback_query_handler(func=lambda call:call.data in ['baby','childs','teens','adults'])
def handler_age(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ', callback_data='schedule'))
    markup.add(types.InlineKeyboardButton('–ó–∞–ø–∏—Å–∞—Ç—å—Å—è',callback_data='trial-lesson'))
    markup.row(
        types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data='directions_styles'),
        types.InlineKeyboardButton('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'),
        )

    if call.data == 'baby':
        text = (
            'üë∂ –î–µ—Ç–∏ (2‚Äì6 –ª–µ—Ç)\n\n'
            '‚Äî –õ–§–ö\n'
            '‚Äî –î–µ—Ç—Å–∫–∞—è —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è\n'
            '‚Äî –ë–µ–π–±–∏\n'
        )
        bot.edit_message_text(chat_id = call.message.chat.id,
                              message_id = call.message.message_id,
                              text = text,
                              reply_markup=markup)
    elif call.data == 'childs':
        text = (
            'üßí –î–µ—Ç–∏ (7‚Äì12 –ª–µ—Ç\n\n'
            '‚Äî –ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞\n'
            '‚Äî –ù–∞—Ä–æ–¥–Ω—ã–µ —Ç–∞–Ω—Ü—ã\n'
            '‚Äî –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–Ω—Ü—ã'
        )
        bot.edit_message_text(chat_id = call.message.chat.id,
                              message_id = call.message.message_id,
                              text = text,
                              reply_markup=markup)
    elif call.data == 'teens':
        text = (
            'üßë‚Äçüéì –ü–æ–¥—Ä–æ—Å—Ç–∫–∏ (12‚Äì18)\n\n'
            '‚Äî –ù–∞—Ä–æ–¥–Ω—ã–µ —Ç–∞–Ω—Ü—ã\n'
            '‚Äî –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–Ω—Ü—ã\n'
            '‚Äî High heels\n'
        )
        bot.edit_message_text(chat_id = call.message.chat.id,
                              message_id = call.message.message_id,
                              text = text,
                              reply_markup=markup)
    elif call.data == 'adults':
        text = (
            'üë© –í–∑—Ä–æ—Å–ª—ã–µ (18+)\n\n'
            '‚Äî –¢–∞–Ω–µ—Ü –∂–∏–≤–æ—Ç–∞\n'
            '‚Äî –ó—É–º–±–∞\n'
            '‚Äî –§–∏—Ç–Ω–µ—Å\n'
            '‚Äî –ô–æ–≥–∞\n'
            '‚Äî High heels\n'
            '‚Äî –ò–Ω—Ç–∏–º–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞\n'
            '‚Äî –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏\n'
            '‚Äî –≠—Ä–æ—Ñ–∏—Ç'
        )
        bot.edit_message_text(chat_id = call.message.chat.id,
                              message_id = call.message.message_id,
                              text = text,
                              reply_markup=markup)



# -------------------–ó–ê–ü–ò–°–¨ –ù–ê –ü–†–û–ë–ù–´–ô –£–†–û–ö---------------------

user_data = {}

@bot.callback_query_handler(func=lambda call: call.data == 'trial-lesson')
def start_trial_lesson(call):
    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('–î–ª—è —Å–µ–±—è', callback_data = 'for_me'),
        types.InlineKeyboardButton('–î–ª—è —Ä–µ–±–µ–Ω–∫–∞', callback_data = 'for_child')
    )
    markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data = 'menu'))

    bot.edit_message_text(
        text = '‚ùì –î–ª—è —Å–µ–±—è –∏–ª–∏ –¥–ª—è —Ä–µ–±–µ–Ω–∫–∞?',
        chat_id = call.message.chat.id,
        message_id = call.message.message_id,
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data in ['for_me','for_child'])
def age_handler(call):
    markup = types.InlineKeyboardMarkup()

    if call.data == 'for_me':
        markup.add(types.InlineKeyboardButton('üßë‚Äçüéì –ü–æ–¥—Ä–æ—Å—Ç–∫–∏ (12‚Äì18)', callback_data = 'trial-lesson-teenS'))
        markup.add(types.InlineKeyboardButton('üë© –í–∑—Ä–æ—Å–ª—ã–µ (18+)', callback_data = 'trial-lesson-adults'))
        markup.row(
            types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data = 'trial-lesson'),
            types.InlineKeyboardButton('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data = 'menu')
            )
        
        bot.edit_message_text(
            text = '–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–∞—à–µ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞:',
            chat_id = call.message.chat.id,
            message_id = call.message.message_id,
            reply_markup = markup
        )
    elif call.data == 'for_child':
        markup.add(types.InlineKeyboardButton('üë∂ –î–µ—Ç–∏ (2‚Äì6 –ª–µ—Ç)', callback_data = 'trial-lesson-baby'))
        markup.add(types.InlineKeyboardButton('üßí –î–µ—Ç–∏ (7‚Äì12 –ª–µ—Ç)', callback_data = 'trial-lesson-childs'))
        markup.add(types.InlineKeyboardButton('üßë‚Äçüéì –ü–æ–¥—Ä–æ—Å—Ç–∫–∏ (12‚Äì18)', callback_data = 'trial-lesson-teens'))
        markup.row(
            types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data = 'trial-lesson'),
            types.InlineKeyboardButton('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data = 'menu')
            )
        
        bot.edit_message_text(
            text = '–£–∫–∞–∂–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –≤–æ–∑—Ä–∞—Å—Ç–∞ —Ä–µ–±–µ–Ω–∫–∞:',
            chat_id = call.message.chat.id,
            message_id = call.message.message_id,
            reply_markup = markup
        )

@bot.callback_query_handler(func = lambda call: call.data.startswith('trial-lesson-'))
def directions_handler(call):
    markup = types.InlineKeyboardMarkup()

    if call.data == 'trial-lesson-baby':
        markup.add(types.InlineKeyboardButton('–õ–§–ö', callback_data = 'sign_up-LFK'))
        markup.add(types.InlineKeyboardButton('–î–µ—Ç—Å–∫–∞—è —Ö–æ—Ä–µ–æ–≥—Ä–∞—Ñ–∏—è', callback_data = 'sign_up-kids_chor'))
        markup.add(types.InlineKeyboardButton('–ë–µ–π–±–∏', callback_data = 'sign_up-baby_chor'))
        markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data = 'for_child'))

        bot.edit_message_text(
            text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
            chat_id = call.message.chat.id,
            message_id = call.message.message_id,
            reply_markup = markup
        )

    elif call.data == 'trial-lesson-childs':
        markup.add(types.InlineKeyboardButton('–ì–∏–º–Ω–∞—Å—Ç–∏–∫–∞', callback_data = 'sign_up-gimnastika'))
        markup.add(types.InlineKeyboardButton('–ù–∞—Ä–æ–¥—ã–Ω–µ —Ç–∞–Ω—Ü—ã', callback_data = 'sign_up-folk'))
        markup.add(types.InlineKeyboardButton('–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–Ω—Ü—ã', callback_data = 'sign_up-modern'))
        markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data = 'for_child'))

        bot.edit_message_text(
            text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
            chat_id = call.message.chat.id,
            message_id = call.message.message_id,
            reply_markup = markup
        )

    elif call.data == 'trial-lesson-teens':
        markup.add(types.InlineKeyboardButton('–ù–∞—Ä–æ–¥–Ω—ã–µ —Ç–∞–Ω—Ü—ã', callback_data = 'sign_up-folk'))
        markup.add(types.InlineKeyboardButton('–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–Ω—Ü—ã', callback_data = 'sign_up-modern'))
        markup.add(types.InlineKeyboardButton('High heels', callback_data = 'sign_up-high-heels'))
        markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data = 'for_me'))

        bot.edit_message_text(
            text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
            chat_id = call.message.chat.id,
            message_id = call.message.message_id,
            reply_markup = markup
        )

    elif call.data == 'trial-lesson-teenS':
        markup.add(types.InlineKeyboardButton('–ù–∞—Ä–æ–¥–Ω—ã–µ —Ç–∞–Ω—Ü—ã', callback_data = 'sign_up-folk'))
        markup.add(types.InlineKeyboardButton('–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–∞–Ω—Ü—ã', callback_data = 'sign_up-modern'))
        markup.add(types.InlineKeyboardButton('High heels', callback_data = 'sign_up-high-heels'))
        markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data = 'for_me'))

        bot.edit_message_text(
            text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
            chat_id = call.message.chat.id,
            message_id = call.message.message_id,
            reply_markup = markup
        )

    elif call.data == 'trial-lesson-adults':
        markup.add(types.InlineKeyboardButton('–¢–∞–Ω–µ—Ü –∂–∏–≤–æ—Ç–∞', callback_data = 'sign_up-belly_dance'))
        markup.add(types.InlineKeyboardButton('–ó—É–º–±–∞', callback_data = 'sign_up-zumba'))
        markup.add(types.InlineKeyboardButton('High heels', callback_data = 'sign_up-high-heels'))
        markup.add(types.InlineKeyboardButton('–§–∏—Ç–Ω–µ—Å', callback_data = 'sign_up-fitnes'))
        markup.add(types.InlineKeyboardButton('–ô–æ–≥–∞', callback_data = 'sign_up-yoga'))
        markup.add(types.InlineKeyboardButton('–ò–Ω—Ç–∏–º–Ω–∞—è –≥–∏–º–Ω–∞—Å—Ç–∏–∫–∞', callback_data = 'sign_up-intim-gimnastika'))
        markup.add(types.InlineKeyboardButton('–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏', callback_data = 'sign_up-func-train'))
        markup.add(types.InlineKeyboardButton('–≠—Ä–æ—Ñ–∏—Ç', callback_data = 'sign_up-erofit'))
        markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data = 'for_me'))

        bot.edit_message_text(
            text = '–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:',
            chat_id = call.message.chat.id,
            message_id = call.message.message_id,
            reply_markup = markup
        )

@bot.callback_query_handler(func=lambda call: call.data.startswith('sign_up-'))
def ask_name(call):
    if call.message.chat.id in user_data:
        bot.answer_callback_query(call.id, text='–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –∑–∞–ø–∏—Å—å ‚è≥')
        return

    user_data[call.message.chat.id] = {
        'direction':call.data,
    }
    msg = bot.send_message(call.message.chat.id,
                     '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:')
    bot.register_next_step_handler(msg, get_name)

def get_name(message):
    user_data[message.chat.id]['name'] = message.text
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn_phone = types.KeyboardButton(text='üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä', request_contact=True)
    markup.add(btn_phone)
    msg = bot.send_message(message.chat.id,
                     '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:',
                     reply_markup=markup)
    markup = types.ReplyKeyboardRemove()
    bot.register_next_step_handler(msg, get_phone)


def get_phone(message):
    if message.contact and message.contact.phone_number:
        phone = message.contact.phone_number
    else:
        phone = message.text.strip()

    user_data[message.chat.id]['phone'] = phone
    user_data[message.chat.id]['user_name'] = message.from_user.username or '‚Äî'
    user_data[message.chat.id]['timestamp'] = datetime.now().strftime('%H:%M %d-%m-Y')

    name = user_data[message.chat.id]['name']
    direction = user_data[message.chat.id]['direction']

    markup = types.InlineKeyboardMarkup()
    markup.row(
        types.InlineKeyboardButton('–î–∞, –≤–µ—Ä–Ω–æ', callback_data='yes'),
        types.InlineKeyboardButton('–ù–µ—Ç, –Ω–µ –≤–µ—Ä–Ω–æ', callback_data='sign-up-')
    )
    bot.send_message(message.chat.id,
                     f'‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞!\n\n'
                     f'üë§ –ò–º—è: {name}\n'
                    #  f'üîó –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_name}\n'
                     f'üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n'
                     f'üï∫ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {direction}\n',
                     reply_markup = markup
                     )
    

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø–∏—Å–∏
@bot.callback_query_handler(func = lambda call: call.data == 'yes')
def notify_manager(call):
    data = user_data.get(call.message.chat.id)

    if not data:
        bot.answer_callback_query(call.id, text='‚ùóÔ∏è–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞.')
        return

    text = (
        f"üì• <b>–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–±–Ω—ã–π —É—Ä–æ–∫!</b>\n\n"
        f"üë§ –ò–º—è: {data['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n"
        f"üï∫ –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {data['direction']}\n"
        f"üë§ Username: @{data['user_name']}\n"
        f"üïí –í—Ä–µ–º—è: {data['timestamp']}"
    )

    bot.send_message(-4755887401, text, parse_mode='HTML')  # –ì—Ä—É–ø–ø–∞ –∏–ª–∏ –∞–¥–º–∏–Ω
    bot.send_message(call.message.chat.id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    user_data.pop(call.message.chat.id, None)
    
                     


# user_data = {}

# @bot.callback_query_handler(func=lambda call: call.data == 'trial-lesson')
# def start_trial_lesson(call):
#     chat_id = call.message.chat.id

#     if chat_id in user_data:
#         bot.answer_callback_query(call.id, text='–í—ã —É–∂–µ –Ω–∞—á–∞–ª–∏ –∑–∞–ø–∏—Å—å ‚è≥')
#         return

#     user_data[chat_id] = {}
#     bot.send_message(chat_id, "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
#     bot.register_next_step_handler(call.message, get_name)

# def get_name(message):
#     chat_id = message.chat.id
#     user_data[chat_id]['name'] = message.text.strip()
#     markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
#     button_phone = types.KeyboardButton(text='üìû –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä', request_contact=True)
#     markup.add(button_phone)
#     bot.send_message(chat_id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=markup)
#     bot.register_next_step_handler(message, get_phone)

# def get_phone(message):
#     chat_id = message.chat.id
#     if message.contact and message.contact.phone_number:
#         phone = message.contact.phone_number
#     else:  
#         phone = message.text.strip()
    
#     if not phone.startswith('+996') or not phone[1:].isdigit() or len(phone) != 13:
#         bot.send_message(chat_id, "‚ùóÔ∏è–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å +996 –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å 13 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
#         bot.register_next_step_handler(message, get_phone)
#         return
#     user_data[chat_id]['phone'] = phone

#     markup = types.ReplyKeyboardRemove()
#     
#     bot.send_message(chat_id, "–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
#                      reply_markup=markup_age)
#     bot.register_next_step_handler(message, get_direction)

# def get_direction(message):
#     chat_id = message.chat.id
#     user_data[chat_id]['direction'] = message.text.strip()
#     user_data[chat_id]['timestamp'] = datetime.now().strftime('%H:%M %d-%m-%Y')
#     user_data[chat_id]['username'] = message.from_user.username or '‚Äî'
    
#     notify_manager(user_data[chat_id])
#     bot.send_message(chat_id, "‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")

#     # –û—á–∏—Å—Ç–∫–∞
#     user_data.pop(chat_id, None)





#---------------–ê–î–†–ï–° –ò –ö–û–ù–¢–ê–ö–¢–´------------------
@bot.callback_query_handler(func=lambda call:call.data == 'adress_contacts')
def adress_contacts(call):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))
    text = (
           "<b>üìç –ê–¥—Ä–µ—Å:</b>\n"
        "üè¢ —É–ª. –¢–æ–∫—Ç–æ–≥—É–ª–∞ 259, –≥. –ö–∞—Ä–∞–∫–æ–ª\n"
        "üß≠ –û—Ä–∏–µ–Ω—Ç–∏—Ä: 2 —ç—Ç–∞–∂, –∑–¥–∞–Ω–∏–µ –±–∞–Ω–∫–∞ ¬´Capital¬ª (–±—ã–≤—à–µ–µ –∫–∞—Ñ–µ ¬´–ö–∞—Ä–∞–≤–∞–Ω¬ª)\n\n"
        
        "<b>üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n"
        "‚òéÔ∏è +996 704 490 100\n"
        "‚òéÔ∏è +996 704 335 430\n"
        "üì≤ WhatsApp: +996 550 245 254\n"
        "üì∏ Instagram: <a href='https://www.instagram.com/kgdance_karakol/'>@kgdance_karakol</a>\n\n"
        
        "<b>üïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:</b>\n"
        "–ü–Ω‚Äì–°–±: 08:00 ‚Äì 20:00\n"
        "–í—Å: 12:00 ‚Äì 14:00"
    )

    bot.edit_message_text(
        text = text,
        chat_id = call.message.chat.id,
        message_id = call.message.message_id,
        parse_mode='HTML',
        reply_markup=markup)
    
#-------------------–ß–ê–°–¢–´–ï –í–û–ü–†–û–°–´------------------
questions = {
    '–í–æ–ø—Ä–æ—Å 1': '–û—Ç–≤–µ—Ç 1',
    '–í–æ–ø—Ä–æ—Å 2': '–û—Ç–≤–µ—Ç 2',
    '–í–æ–ø—Ä–æ—Å 3': '–û—Ç–≤–µ—Ç 3',
    '–í–æ–ø—Ä–æ—Å 4': '–û—Ç–≤–µ—Ç 4',
    '–í–æ–ø—Ä–æ—Å 5': '–û—Ç–≤–µ—Ç 5',
}

@bot.callback_query_handler(func=lambda call: call.data == 'questions')
def show_questions(call):
    markup = types.InlineKeyboardMarkup()
    for i, q in enumerate(questions.keys()):
        markup.add(types.InlineKeyboardButton(f'‚ùì {q}', callback_data=f'que_{i}'))
    markup.add(types.InlineKeyboardButton('‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='menu'))

    bot.edit_message_text(chat_id = call.message.chat.id,
                          message_id=call.message.message_id,
                          text = 'üß† <b>–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å:',
                          parse_mode = 'HTML',
                          reply_markup = markup)
    
@bot.callback_query_handler(func=lambda call: call.data.startswith('que_'))
def answer_questions(call):
    q_index = int(call.data.split('_')[1])
    question = list(questions.keys())[q_index]
    answer = questions[question]

    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton('–ù–∞–∑–∞–¥ –∫ –≤–æ–ø—Ä–æ—Å–∞–º', callback_data = 'questions'))
    markup.add(types.InlineKeyboardButton('–ì–ª–∞–≤–Ω–µ–æ –º–µ–Ω—é', callback_data = 'menu'))
    
    bot.edit_message_text(
        chat_id = call.message.chat.id,
        message_id = call.message.message_id,
        text = f'<b>‚ùì {question}</b>\n\n‚Äî {answer}',
        parse_mode = 'HTML',
        reply_markup=markup
    )

bot.polling(non_stop=True)